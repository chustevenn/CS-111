Total: 1235 samples
    1063  86.1%  86.1%     1064  86.2% spin_lock_timed
      57   4.6%  90.7%       57   4.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
      19   1.5%  92.2%       19   1.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
      15   1.2%  93.4%       84   6.8% SortedList_insert
      14   1.1%  94.6%       14   1.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
      13   1.1%  95.6%       87   7.0% SortedList_lookup
       8   0.6%  96.3%        8   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:212
       7   0.6%  96.8%        7   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       6   0.5%  97.3%        6   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       6   0.5%  97.8%        6   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:211
       5   0.4%  98.2%        5   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:161
       5   0.4%  98.6%        5   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1733
       5   0.4%  99.0%        5   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       4   0.3%  99.4%        4   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       4   0.3%  99.7%        4   0.3% _init
       2   0.2%  99.8%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:206
       1   0.1% 100.0%        1   0.1% 0x00007fffbf3e18e5
       0   0.0% 100.0%     1235 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%        1   0.1% __GI___clock_gettime
       0   0.0% 100.0%      565  45.7% list_delete
       0   0.0% 100.0%      670  54.3% list_insert_all
       0   0.0% 100.0%     1235 100.0% start_thread
       0   0.0% 100.0%     1235 100.0% thread_action
ROUTINE ====================== thread_action in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0   1235 Total samples (flat / cumulative)
     .      .  266: 	}
     .      .  267: }
     .      .  268: 
     .      .  269: // Function to call when threads are created
     .      .  270: void *thread_action(void* index)
---
     .      .  271: {
     .      .  272: 	int *i = (int *) index;
     .    670  273: 	list_insert_all(*i);
     .      .  274: 	list_getlength();
     .    565  275: 	list_delete(*i);
     .      .  276: 	return NULL; 
     .      .  277: }
---
     .      .  278: 
     .      .  279: int main(int argc, char *argv[])
     .      .  280: {
     .      .  281: 	// Handle options
     .      .  282: 	while(1)
ROUTINE ====================== thread_action in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0   1235 Total samples (flat / cumulative)
     .      .  266: 	}
     .      .  267: }
     .      .  268: 
     .      .  269: // Function to call when threads are created
     .      .  270: void *thread_action(void* index)
---
     .      .  271: {
     .      .  272: 	int *i = (int *) index;
     .    670  273: 	list_insert_all(*i);
     .      .  274: 	list_getlength();
     .    565  275: 	list_delete(*i);
     .      .  276: 	return NULL; 
     .      .  277: }
---
     .      .  278: 
     .      .  279: int main(int argc, char *argv[])
     .      .  280: {
     .      .  281: 	// Handle options
     .      .  282: 	while(1)
ROUTINE ====================== list_insert_all in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0    670 Total samples (flat / cumulative)
     .      .  137: 	return hash_index;
     .      .  138: }
     .      .  139: 
     .      .  140: // Thread iterative insert function with lock handling
     .      .  141: void list_insert_all(int index)
---
     .      .  142: {
     .      .  143: 	int i;
     .      .  144: 	for(i = index; i < (num_iterations * num_threads); i += num_threads)
     .      .  145: 	{
     .      .  146: 		int hash_index = get_hash_index(elements[i].key);
     .      .  147: 		if(opt_sync)
     .      .  148: 		{
     .      .  149: 			if(sync_option == 'm')
     .      .  150: 			{
     .      .  151: 				mutex_lock_timed(&lock[hash_index]);	
     .      .  152: 				SortedList_insert(&list[hash_index], &elements[i]);
     .      .  153: 				pthread_mutex_unlock(&lock[hash_index]);
     .      .  154: 			}
     .      .  155: 			else if(sync_option == 's')
     .      .  156: 			{
     .    586  157: 				spin_lock_timed(&spin_lock[hash_index]);	
     .     84  158: 				SortedList_insert(&list[hash_index], &elements[i]);
     .      .  159: 				__sync_lock_release(&spin_lock[hash_index]);
     .      .  160: 			}
     .      .  161: 		}
     .      .  162: 		else
     .      .  163: 		{
     .      .  164: 			SortedList_insert(&list[hash_index], &elements[i]);
     .      .  165: 		}
     .      .  166: 	}
     .      .  167: }
---
     .      .  168: 
     .      .  169: // Retrieve length of list with lock handling
     .      .  170: void list_getlength()
     .      .  171: {
     .      .  172: 	int length = 0;
ROUTINE ====================== list_insert_all in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0    670 Total samples (flat / cumulative)
     .      .  137: 	return hash_index;
     .      .  138: }
     .      .  139: 
     .      .  140: // Thread iterative insert function with lock handling
     .      .  141: void list_insert_all(int index)
---
     .      .  142: {
     .      .  143: 	int i;
     .      .  144: 	for(i = index; i < (num_iterations * num_threads); i += num_threads)
     .      .  145: 	{
     .      .  146: 		int hash_index = get_hash_index(elements[i].key);
     .      .  147: 		if(opt_sync)
     .      .  148: 		{
     .      .  149: 			if(sync_option == 'm')
     .      .  150: 			{
     .      .  151: 				mutex_lock_timed(&lock[hash_index]);	
     .      .  152: 				SortedList_insert(&list[hash_index], &elements[i]);
     .      .  153: 				pthread_mutex_unlock(&lock[hash_index]);
     .      .  154: 			}
     .      .  155: 			else if(sync_option == 's')
     .      .  156: 			{
     .    586  157: 				spin_lock_timed(&spin_lock[hash_index]);	
     .     84  158: 				SortedList_insert(&list[hash_index], &elements[i]);
     .      .  159: 				__sync_lock_release(&spin_lock[hash_index]);
     .      .  160: 			}
     .      .  161: 		}
     .      .  162: 		else
     .      .  163: 		{
     .      .  164: 			SortedList_insert(&list[hash_index], &elements[i]);
     .      .  165: 		}
     .      .  166: 	}
     .      .  167: }
---
     .      .  168: 
     .      .  169: // Retrieve length of list with lock handling
     .      .  170: void list_getlength()
     .      .  171: {
     .      .  172: 	int length = 0;
ROUTINE ====================== list_delete in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0    565 Total samples (flat / cumulative)
     .      .  204: 	}
     .      .  205: }
     .      .  206: 
     .      .  207: // Iterative search and delete with lock handling 
     .      .  208: void list_delete(int index)
---
     .      .  209: {
     .      .  210: 	int i;
     .      .  211: 	for(i = index; i < (num_threads * num_iterations); i += num_threads)
     .      .  212: 	{
     .      .  213: 		int hash_index = get_hash_index(elements[i].key);
     .      .  214: 		if(opt_sync)
     .      .  215: 		{
     .      .  216: 			if(sync_option == 'm')
     .      .  217: 			{
     .      .  218: 				mutex_lock_timed(&lock[hash_index]);	
     .      .  219: 				SortedListElement_t *elem;
     .      .  220: 				elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  221: 				if(elem == NULL)
     .      .  222: 				{
     .      .  223: 					fprintf(stderr, "Error in finding element to delete.\n");
     .      .  224: 					exit(2);
     .      .  225: 				}
     .      .  226: 				if(SortedList_delete(elem) == 1)
     .      .  227: 				{
     .      .  228: 					fprintf(stderr, "Error deleting element.\n");
     .      .  229: 					exit(2);
     .      .  230: 				}
     .      .  231: 				pthread_mutex_unlock(&lock[hash_index]);
     .      .  232: 			}
     .      .  233: 			else if(sync_option == 's')
     .      .  234: 			{
     .    478  235: 				spin_lock_timed(&spin_lock[hash_index]);
     .      .  236: 				SortedListElement_t *elem;
     .     87  237:                                 elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  238:                                 if(elem == NULL)
     .      .  239:                                 {
     .      .  240:                                         fprintf(stderr, "Error in finding element to delete.\n");
     .      .  241:                                         exit(2);
     .      .  242:                                 }
     .      .  243:                                 if(SortedList_delete(elem) == 1)
     .      .  244:                                 {
     .      .  245:                                         fprintf(stderr, "Error deleting element.\n");
     .      .  246:                                         exit(2);
     .      .  247:                                 }
     .      .  248: 				__sync_lock_release(&spin_lock[hash_index]);
     .      .  249: 			}
     .      .  250: 		}
     .      .  251: 		else
     .      .  252: 		{
     .      .  253: 			SortedListElement_t *elem;
     .      .  254: 			elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  255: 			if(elem == NULL)
     .      .  256: 			{
     .      .  257: 				fprintf(stderr, "Error in finding element to delete.\n");
     .      .  258: 				exit(2);
     .      .  259: 			}
     .      .  260: 			if(SortedList_delete(elem) == 1)
     .      .  261: 			{
     .      .  262: 				fprintf(stderr, "Error deleting element.\n");
     .      .  263: 				exit(2);
     .      .  264: 			}
     .      .  265: 		}
     .      .  266: 	}
     .      .  267: }
---
     .      .  268: 
     .      .  269: // Function to call when threads are created
     .      .  270: void *thread_action(void* index)
     .      .  271: {
     .      .  272: 	int *i = (int *) index;
ROUTINE ====================== list_delete in /u/eng/class/classchu/cs111-p2b/lab2_list.c
     0    565 Total samples (flat / cumulative)
     .      .  204: 	}
     .      .  205: }
     .      .  206: 
     .      .  207: // Iterative search and delete with lock handling 
     .      .  208: void list_delete(int index)
---
     .      .  209: {
     .      .  210: 	int i;
     .      .  211: 	for(i = index; i < (num_threads * num_iterations); i += num_threads)
     .      .  212: 	{
     .      .  213: 		int hash_index = get_hash_index(elements[i].key);
     .      .  214: 		if(opt_sync)
     .      .  215: 		{
     .      .  216: 			if(sync_option == 'm')
     .      .  217: 			{
     .      .  218: 				mutex_lock_timed(&lock[hash_index]);	
     .      .  219: 				SortedListElement_t *elem;
     .      .  220: 				elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  221: 				if(elem == NULL)
     .      .  222: 				{
     .      .  223: 					fprintf(stderr, "Error in finding element to delete.\n");
     .      .  224: 					exit(2);
     .      .  225: 				}
     .      .  226: 				if(SortedList_delete(elem) == 1)
     .      .  227: 				{
     .      .  228: 					fprintf(stderr, "Error deleting element.\n");
     .      .  229: 					exit(2);
     .      .  230: 				}
     .      .  231: 				pthread_mutex_unlock(&lock[hash_index]);
     .      .  232: 			}
     .      .  233: 			else if(sync_option == 's')
     .      .  234: 			{
     .    478  235: 				spin_lock_timed(&spin_lock[hash_index]);
     .      .  236: 				SortedListElement_t *elem;
     .     87  237:                                 elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  238:                                 if(elem == NULL)
     .      .  239:                                 {
     .      .  240:                                         fprintf(stderr, "Error in finding element to delete.\n");
     .      .  241:                                         exit(2);
     .      .  242:                                 }
     .      .  243:                                 if(SortedList_delete(elem) == 1)
     .      .  244:                                 {
     .      .  245:                                         fprintf(stderr, "Error deleting element.\n");
     .      .  246:                                         exit(2);
     .      .  247:                                 }
     .      .  248: 				__sync_lock_release(&spin_lock[hash_index]);
     .      .  249: 			}
     .      .  250: 		}
     .      .  251: 		else
     .      .  252: 		{
     .      .  253: 			SortedListElement_t *elem;
     .      .  254: 			elem = SortedList_lookup(&list[hash_index], elements[i].key);
     .      .  255: 			if(elem == NULL)
     .      .  256: 			{
     .      .  257: 				fprintf(stderr, "Error in finding element to delete.\n");
     .      .  258: 				exit(2);
     .      .  259: 			}
     .      .  260: 			if(SortedList_delete(elem) == 1)
     .      .  261: 			{
     .      .  262: 				fprintf(stderr, "Error deleting element.\n");
     .      .  263: 				exit(2);
     .      .  264: 			}
     .      .  265: 		}
     .      .  266: 	}
     .      .  267: }
---
     .      .  268: 
     .      .  269: // Function to call when threads are created
     .      .  270: void *thread_action(void* index)
     .      .  271: {
     .      .  272: 	int *i = (int *) index;
ROUTINE ====================== spin_lock_timed in /u/eng/class/classchu/cs111-p2b/lab2_list.c
  1063   1064 Total samples (flat / cumulative)
     .      .   87: 	lock_wait_time += gettime(&start, &end);
     .      .   88: }
     .      .   89: 
     .      .   90: // Spin lock while recording wait time
     .      .   91: void spin_lock_timed(int *slock)
---
     .      .   92: {
     .      .   93: 	struct timespec start, end;
     .      .   94: 	clock_gettime(CLOCK_MONOTONIC, &start);
  1063   1063   95: 	while(__sync_lock_test_and_set(slock, 1))
     .      .   96: 	;
     .      1   97: 	clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   98: 	lock_wait_time += gettime(&start, &end);
     .      .   99: }
---
     .      .  100: // Wrapper function for pthread_create error handling
     .      .  101: void Pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)
     .      .  102: {
     .      .  103: 	if(pthread_create(thread, attr, start_routine, arg) != 0)
     .      .  104: 	{
ROUTINE ====================== spin_lock_timed in /u/eng/class/classchu/cs111-p2b/lab2_list.c
  1063   1064 Total samples (flat / cumulative)
     .      .   87: 	lock_wait_time += gettime(&start, &end);
     .      .   88: }
     .      .   89: 
     .      .   90: // Spin lock while recording wait time
     .      .   91: void spin_lock_timed(int *slock)
---
     .      .   92: {
     .      .   93: 	struct timespec start, end;
     .      .   94: 	clock_gettime(CLOCK_MONOTONIC, &start);
  1063   1063   95: 	while(__sync_lock_test_and_set(slock, 1))
     .      .   96: 	;
     .      1   97: 	clock_gettime(CLOCK_MONOTONIC, &end);
     .      .   98: 	lock_wait_time += gettime(&start, &end);
     .      .   99: }
---
     .      .  100: // Wrapper function for pthread_create error handling
     .      .  101: void Pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)
     .      .  102: {
     .      .  103: 	if(pthread_create(thread, attr, start_routine, arg) != 0)
     .      .  104: 	{
